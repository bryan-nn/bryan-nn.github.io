<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Keepalived使用的vrrp协议方式，虚拟路由冗余协议 (Virtual Router Redundancy Protocol，简称VRRP)；<br>Heartbeat或Corosync是基于主机或网络服务的高可用方式；简单的说就是，Keepalived的目的是模拟路由器的高可用，Heartbeat或Corosync的目的是实现Service的高可用。所以一般Keepalived是实现前端高可用，常用的前端高可用的组合有，就是我们常见的LVS+Keepalived、Nginx+Keepalived、HAproxy+Keepalived。<br>而Heartbeat或Corosync是实现服务的高可用，常见的组合有<br>Heartbeat v3(Corosync)+Pacemaker+NFS+Httpd 实现Web服务器的高可用、<br>Heartbeat v3(Corosync)+Pacemaker+NFS+MySQL 实现MySQL服务器的高可用。<br>总结一下，Keepalived中实现轻量级的高可用，一般用于前端高可用，且不需要共享存储，一般常用于两个节点的高可用。而Heartbeat(或Corosync)一般用于服务的高可用，且需要共享存储，一般用于多节点的高可用。这个问题我们说明白了，又有博友会问了，那heartbaet与corosync我们又应该选择哪个好啊，我想说我们一般用corosync，因为corosync的运行机制更优于heartbeat，就连从heartbeat分离出来的pacemaker都说在以后的开发当中更倾向于corosync，所以现在corosync+pacemaker是最佳组合。但说实话我对于软件没有任何倾向性，所以我把所有的集群软件都和大家说了一下，我认为不管什么软件，只要它能存活下来都有它的特点和应用领域，只有把特定的软件放在特定的位置才能发挥最大的作用，那首先我们得对这个软件有所有了解。学习一种软件的最好方法，就是去查官方文档。好了说了那么多希望大家有所收获，下面我们来说一说keepalived。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#keepalive%E7%AE%80%E4%BB%8B">keepalive简介</a></li><li><a href="#keepalived%E6%90%AD%E5%BB%BA">keepalived 搭建</a></li></ul><h2 id="keepalive简介："><a href="#keepalive简介：" class="headerlink" title="keepalive简介："></a>keepalive简介：</h2><h3 id="1-Keepalived-定义"><a href="#1-Keepalived-定义" class="headerlink" title="1.Keepalived 定义"></a>1.Keepalived 定义</h3><blockquote><p>Keepalived 是一个基于VRRP协议来实现的LVS服务高可用方案，可以利用其来避免单点故障。一个LVS服务会有2台服务器运行Keepalived，一台为主服务器（MASTER），一台为备份服务器（BACKUP），但是对外表现为一个虚拟IP，主服务器会发送特定的消息给备份服务器，当备份服务器收不到这个消息的时候，即主服务器宕机的时候， 备份服务器就会接管虚拟IP，继续提供服务，从而保证了高可用性。Keepalived是VRRP的完美实现，因此在介绍keepalived之前，先介绍一下VRRP的原理。</p></blockquote><ul><li>负载均衡架构依赖于知名的IPVS内核模块，keepalive由一组检查器根据服务器的健康情况动态维护和管理服务器池。keepalive通过VRRP协议实现高可用架构。VRRP是路由灾备的实现基础。</li><li>LVS核心是调度器，所有的数据请求需要经过调度器进行调度转发。万一调度器发生故障，整个集群系统全部崩溃，所以需要keepalive实现集群系统的高可用。</li><li>部署两台或多台lvs调度器，仅有一台调度器做主服务器，其他为备用。当主发生故障后，keepalive可以自动将备用调度器作为主，实现整个集群系统的高负载，高可用</li></ul><h3 id="2-VRRP-协议简介"><a href="#2-VRRP-协议简介" class="headerlink" title="2.VRRP 协议简介"></a>2.VRRP 协议简介</h3><p>在现实的网络环境中，两台需要通信的主机大多数情况下并没有直接的物理连接。对于这样的情况，它们之间路由怎样选择？主机如何选定到达目的主机的下一跳路由，这个问题通常的解决方法有二种：</p><ul><li>在主机上使用动态路由协议(RIP、OSPF等)</li><li>在主机上配置静态路由 <br>很明显，在主机上配置动态路由是非常不切实际的，因为管理、维护成本以及是否支持等诸多问题。配置静态路由就变得十分流行，但路由器(或者说默认网关default gateway)却经常成为单点故障。VRRP的目的就是为了解决静态路由单点故障问题，VRRP通过一竞选(election)协议来动态的将路由任务交给LAN中虚拟路由器中的某台VRRP路由器。</li></ul><h3 id="3-VRRP-工作机制"><a href="#3-VRRP-工作机制" class="headerlink" title="3.VRRP 工作机制"></a>3.VRRP 工作机制</h3><blockquote><p>在一个VRRP虚拟路由器中，有多台物理的VRRP路由器，但是这多台的物理的机器并不能同时工作，而是由一台称为MASTER的负责路由工作，其它的都是BACKUP，MASTER并非一成不变，VRRP让每个VRRP路由器参与竞选，最终获胜的就是MASTER。MASTER拥有一些特权，比如，拥有虚拟路由器的IP地址，我们的主机就是用这个IP地址作为静态路由的。拥有特权的MASTER要负责转发发送给网关地址的包和响应ARP请求。<br>VRRP通过竞选协议来实现虚拟路由器的功能，所有的协议报文都是通过IP多播(multicast)包(多播地址224.0.0.18)形式发送的。虚拟路由器由VRID(范围0-255)和一组IP地址组成，对外表现为一个周知的MAC地址。所以，在一个虚拟路由 器中，不管谁是MASTER，对外都是相同的MAC和IP(称之为VIP)。客户端主机并不需要因为MASTER的改变而修改自己的路由配置，对客户端来说，这种主从的切换是透明的。<br>在一个虚拟路由器中，只有作为MASTER的VRRP路由器会一直发送VRRP通告信息(VRRPAdvertisement message)，BACKUP不会抢占MASTER，除非它的优先级(priority)更高。当MASTER不可用时(BACKUP收不到通告信息)， 多台BACKUP中优先级最高的这台会被抢占为MASTER。这种抢占是非常快速的(&lt;1s)，以保证服务的连续性。由于安全性考虑，VRRP包使用了加密协议进行加密。</p></blockquote><h3 id="4-VRRP-工作流程"><a href="#4-VRRP-工作流程" class="headerlink" title="4.VRRP 工作流程"></a>4.VRRP 工作流程</h3><h4 id="1-初始化："><a href="#1-初始化：" class="headerlink" title="(1).初始化："></a>(1).初始化：</h4><p><br>路由器启动时，如果路由器的优先级是255(最高优先级，路由器拥有路由器地址)，要发送VRRP通告信息，并发送广播ARP信息通告路由器IP地址对应的MAC地址为路由虚拟MAC，设置通告信息定时器准备定时发送VRRP通告信息，转为MASTER状态；否则进入BACKUP状态，设置定时器检查定时检查是否收到MASTER的通告信息。</p><h4 id="2-Master"><a href="#2-Master" class="headerlink" title="(2).Master"></a>(2).Master</h4><ul><li>设置定时通告定时器；</li><li>用VRRP虚拟MAC地址响应路由器IP地址的ARP请求；</li><li>转发目的MAC是VRRP虚拟MAC的数如果是虚拟路由器IP的拥有者，将接受目的地址是虚拟路由器IP的数据当收到shutdown的事件时删除定时通告定时器，发送优先权&lt;级为0的如果定时通告定时器超时时，发送VRRP通告信息；</li><li>收到VRRP通告信息时，如果优先权为0，发送VRRP通告信息；否则判断数据的优先级是否高于本机，或相等而且实际IP地址大于本地实际IP，设置定时通告定时器，复位主机超时定时器，转BACKUP状态；否则的话，丢弃该通告包；</li></ul><h4 id="3-Backup"><a href="#3-Backup" class="headerlink" title="(3).Backup"></a>(3).Backup</h4><ul><li>设置主机超时定时器；</li><li>不能响应针对虚拟路由器IP的ARP请求信息；</li><li>丢弃所有目的MAC地址是虚拟路由器MAC地址的数据包；</li><li>不接受目的是虚拟路由器IP的所有数据包；</li><li>当收到shutdown的事件时删除主机超时定时器，转初始化状态；</li><li>主机超时定时器超时的时候，发送VRRP通告信息，广播ARP地址信息，转MASTER状态；</li><li>收到VRRP通告信息时，如果优先权为0，表示进入MASTER选举；否则判断数据的优先级是否高于本机，如果高的话承认MASTER有效，复位主机超时定时器；否则的话，丢弃该通告包；</li></ul><h3 id="5-ARP查询处理"><a href="#5-ARP查询处理" class="headerlink" title="5.ARP查询处理"></a>5.ARP查询处理</h3><blockquote><p>当内部主机通过ARP查询虚拟路由器IP地址对应的MAC地址时，MASTER路由器回复的MAC地址为虚拟的VRRP的MAC地址，而不是实际网卡的 MAC地址，这样在路由器切换时让内网机器觉察不到；而在路由器重新启动时，不能主动发送本机网卡的实际MAC地址。如果虚拟路由器开启的ARP代理 (proxy_arp)功能，代理的ARP回应也回应VRRP虚拟</p><p>MAC地址；好了VRRP的简单讲解就到这里，我们下来讲解一下Keepalived的案例。</p></blockquote><h2 id="keepalived搭建"><a href="#keepalived搭建" class="headerlink" title="keepalived搭建"></a>keepalived搭建</h2><h5 id="1-上传或下载-keepalived"><a href="#1-上传或下载-keepalived" class="headerlink" title="1. 上传或下载 keepalived"></a>1. 上传或下载 keepalived</h5><p>下载地址： <a href="https://www.keepalived.org/download.html">https://www.keepalived.org/download.html</a></p><p>将keepalived-2.2.7.tar.gz 上传到服务器的 &#x2F;usr&#x2F;local&#x2F;src 目录</p><h5 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2. 解压安装"></a>2. 解压安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local/src</span></span><br><span class="line"><span class="comment"># tar -zxvf keepalived-2.2.7.tar.gz</span></span><br><span class="line"><span class="comment"># cd keepalived-2.2.7</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/keepalived</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h5 id="3-将-keepalived-安装成-Linux-系统服务"><a href="#3-将-keepalived-安装成-Linux-系统服务" class="headerlink" title="3. 将 keepalived 安装成 Linux 系统服务"></a>3. 将 keepalived 安装成 Linux 系统服务</h5><p>因为没有使用 keepalived 的默认路径安装（默认是&#x2F;usr&#x2F;local） ,安装完成之后，需要做一些工作复制默认配置文件到默认路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /etc/keepalived</span></span><br><span class="line"><span class="comment"># cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span></span><br></pre></td></tr></table></figure><p>复制 keepalived 服务脚本到默认的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/</span></span><br><span class="line"><span class="comment"># cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span></span><br><span class="line"><span class="comment"># ln -s /usr/local/sbin/keepalived /usr/sbin/</span></span><br><span class="line"><span class="comment"># ln -s /usr/local/keepalived/sbin/keepalived /sbin/</span></span><br></pre></td></tr></table></figure><p>设置 keepalived 服务开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chkconfig keepalived on</span></span><br></pre></td></tr></table></figure><h5 id="4-修改-Keepalived-配置文件"><a href="#4-修改-Keepalived-配置文件" class="headerlink" title="4. 修改 Keepalived 配置文件"></a>4. 修改 Keepalived 配置文件</h5><p>Master 节点配置&amp;#x20;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="comment">## keepalived 自带的邮件提醒需要开启 sendmail 服务。 建议用独立的监控或第三方 SMTP</span></span><br><span class="line">router_id liuyazhuang133 <span class="comment">## 标识本节点的字条串，通常为 hostname</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">## keepalived 会定时执行脚本并对脚本执行的结果进行分析，动态调整 vrrp_instance 的优先级。如果脚本执行结果为 0，并且 weight 配置的值大于 0，则优先级相应的增加。如果脚本执行结果非 0，并且 weight配置的值小于 0，则优先级相应的减少。其他情况，维持原本配置的优先级，即配置文件中 priority 对应的值。</span></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">script <span class="string">&quot;/etc/keepalived/nginx_check.sh&quot;</span> <span class="comment">## 检测 nginx 状态的脚本路径</span></span><br><span class="line">interval 2 <span class="comment">## 检测时间间隔</span></span><br><span class="line">weight -20 <span class="comment">## 如果条件成立，权重-20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 定义虚拟路由， VI_1 为虚拟路由的标示符，自己定义名称</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">state MASTER <span class="comment">## 主节点为 MASTER， 对应的备份节点为 BACKUP</span></span><br><span class="line">interface eth0 <span class="comment">## 绑定虚拟 IP 的网络接口，与本机 IP 地址所在的网络接口相同， 我的是 eth0</span></span><br><span class="line">virtual_router_id 33 <span class="comment">## 虚拟路由的 ID 号， 两个节点设置必须一样， 可选 IP 最后一段使用, 相同的 VRID 为一个组，他将决定多播的 MAC 地址</span></span><br><span class="line">mcast_src_ip 192.168.50.133 <span class="comment">## 本机 IP 地址</span></span><br><span class="line">priority 100 <span class="comment">## 节点优先级， 值范围 0-254， MASTER 要比 BACKUP 高</span></span><br><span class="line">nopreempt <span class="comment">## 优先级高的设置 nopreempt 解决异常恢复后再次抢占的问题</span></span><br><span class="line">advert_int 1 <span class="comment">## 组播信息发送间隔，两个节点设置必须一样， 默认 1s</span></span><br><span class="line"><span class="comment">## 设置验证信息，两个节点必须一致</span></span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111 <span class="comment">## 真实生产，按需求对应该过来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 将 track_script 块加入 instance 配置块</span></span><br><span class="line">track_script &#123;</span><br><span class="line">chk_nginx <span class="comment">## 执行 Nginx 监控的服务</span></span><br><span class="line">&#125; <span class="comment">#</span></span><br><span class="line"><span class="comment"># 虚拟 IP 池, 两个节点设置必须一样</span></span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.50.130 <span class="comment">## 虚拟 ip，可以定义多个</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BACKUP 节点配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">router_id liuyazhuang134</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">script <span class="string">&quot;/etc/keepalived/nginx_check.sh&quot;</span></span><br><span class="line">interval 2</span><br><span class="line">weight -20</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">state BACKUP</span><br><span class="line">interface eth1</span><br><span class="line">virtual_router_id 33</span><br><span class="line">mcast_src_ip 192.168.50.134</span><br><span class="line">priority 90</span><br><span class="line">advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">track_script &#123;</span><br><span class="line">chk_nginx</span><br><span class="line">&#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.50.130</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-编写-Nginx-状态检测脚本"><a href="#5-编写-Nginx-状态检测脚本" class="headerlink" title="5. 编写 Nginx 状态检测脚本"></a>5. 编写 Nginx 状态检测脚本</h5><p>编写 Nginx 状态检测脚本 &#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh (已在 keepalived.conf 中配置)脚本要求：如果 nginx 停止运行，尝试启动，如果无法启动则杀死本机的 keepalived 进程， keepalied将虚拟 ip 绑定到 BACKUP 机器上。 内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/keepalived/nginx_check.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">A=`ps -C nginx –no-header |<span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    <span class="built_in">sleep</span> 2</span><br><span class="line">    <span class="keyword">if</span> [ `ps -C nginx --no-header |<span class="built_in">wc</span> -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    killall keepalived</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h5 id="6-启动-Keepalived"><a href="#6-启动-Keepalived" class="headerlink" title="6. 启动 Keepalived"></a>6. 启动 Keepalived</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start keepalived </span></span><br><span class="line">Starting keepalived: [ OK ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 表格 </tag>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
